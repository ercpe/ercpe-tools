#!/usr/bin/env python
# encoding: utf-8

import sys
import os
import logging
import traceback
import argparse
import re
from sh import chown, chmod, chattr, useradd, mergeini #@UnresolvedImport
import shutil
#from mergeini import merge

__version__ = 0.1

config_template = """<VirtualHost *:80>
	Include %(include_file)s
	%(http_extras)s
</VirtualHost>

<VirtualHost *:443>
	Include %(config_dir)s/002_ssl.include
	Include %(include_file)s
	%(https_extras)s
</VirtualHost>
"""

include_template = """ServerName	%(fqdn)s
ServerAdmin	www@%(domain)s

DocumentRoot "%(vhost_dir)s/htdocs"
CustomLog /var/log/apache2/%(fqdn)s_access.log combined
ErrorLog /var/log/apache2/%(fqdn)s_error.log

<Directory "%(vhost_dir)s/htdocs">
	Options FollowSymLinks

	AllowOverride None

	Order allow,deny
	Allow from all
</Directory>
"""

php_snippet_template = """
Include %(config_dir)s/001_php.include
Alias /fcgi %(vhost_dir)s/fcgi
SuexecUserGroup %(user)s %(group)s
"""

fcgi_conf_template="""PHPRC="%(vhost_dir)s/conf"
export PHP_FCGI_CHILDREN=1
export PHP_FCGI_MAX_REQUESTS=50
"""

fcgi_starter_template="""#!/bin/sh

### Special protection: This script has the immutable bit set.
### DO NOT EDIT THIS FILE UNLESS YOU HAVE TO !!!!!

### Remove protection:
### chattr -i -V fcgi-starter

### Re-Add protection after edit:
### chattr +i -V fcgi-starter

export PHP_FCGI_CHILDREN=4
export PHPRC="/etc/php/cgi-php5/"

my_path=$(dirname "$0");
my_config="${my_path}/fcgi.conf"

if [ -r "$my_config" ]; then
    source "${my_config}"
fi

exec /usr/bin/php-cgi
"""

class VhostConfigurator(object):

	def __init__(self, vhost):
		m = re.match("^(?P<subdomain>[\w\d\-_]+)\.(?P<domain>[\w\d\-_]+)\.(?P<tld>[\w\d]+)$", vhost, re.IGNORECASE)
		if not m:
			raise Exception("Illegal fqdn: '%s'" % vhost)

		self.fqdn = vhost
		self.subdomain = m.group("subdomain")
		self.domain_name = m.group("domain")
		self.tld = m.group("tld")
		self.domain = "%s.%s" % (self.domain_name, self.tld)

	def create(self):
		self.config_dir = self.config_dir.rstrip('/')
		self.vhost_dir = os.path.join(self.basedir, self.schema % {
						'domain': self.domain,
						'subdomain': self.subdomain,
						'fqdn': self.fqdn
					}).rstrip('/')

		self.config_file = os.path.join(self.config_dir, "%s.conf" % self.fqdn)
		self.include_file = os.path.join(self.config_dir, "%s.include" % self.fqdn)

		if os.path.exists(self.config_file) or os.path.exists(self.include_file):
			raise Exception("Apache configuration files (%s and/or %s) already exist")

		# create a new user account
		self.user, self.group = self._create_user()

		# create the vhost directory with the created user/group
		self._create_docroot()

		self._create_apache_config()


	def _create_user(self):
		if not self.suexec:
			return (self.default_user, self.default_user)

		r = re.compile('^web(\d+)$', re.IGNORECASE)

		max_num = 0

		with open('/etc/passwd', 'r') as f:
			lines = [x.strip() for x in f.readlines()]

			for account_info in lines:
				parts = account_info.split(':')
				m = r.match(parts[0])
				if m and int(m.group(1)) > max_num:
					max_num = int(m.group(1))

		username = 'web%s' % (max_num + 1)
		useradd('-d', self.vhost_dir, '-M', '-s', '/sbin/nologin', username)
		return (username, username)

	def _create_docroot(self):
		if os.path.exists(self.vhost_dir):
			raise Exception("Directory %s already exist!" % self.vhost_dir)

		print "Creating vhost %s in %s" % (self.fqdn, self.vhost_dir)

		os.makedirs(self.vhost_dir, 0755)
		for x in ['logs', 'htdocs', 'temp/uploads', 'temp/sessions']:
			os.makedirs(os.path.join(self.vhost_dir, x), 0755)

		chmod(550, os.path.join(self.vhost_dir, 'temp/'))

		owner = "%s:%s" % (self.user, self.group)
		chown(owner, self.vhost_dir, '-R')

		if self.enable_php:
			self._install_php()

	def _install_php(self):
		for x in ['conf', 'fcgi']:
			os.makedirs(os.path.join(self.vhost_dir, x), 0755)

		global_updates = os.path.join(self.globals_dir, 'vhost.ini')
		vhost_updates = os.path.join(self.vhost_dir, 'conf/vhost.ini')
		vhost_ini = os.path.join(self.vhost_dir, 'conf/php.ini')

		if os.path.isfile(global_updates):
			shutil.copy(global_updates, vhost_updates)
			#merge(None, vhost_updates, vhost_ini, vhost_dir=self.vhost_dir)
			mergeini("-v", self.vhost_dir, "-o", vhost_ini, global_updates, vhost_updates)

		d = {
			'vhost_dir': self.vhost_dir
		}
		with open(os.path.join(self.vhost_dir, 'fcgi/fcgi.conf'), 'w') as f:
			f.write(fcgi_conf_template % d)

		starter_file = os.path.join(self.vhost_dir, 'fcgi/fcgi-starter')
		with open(starter_file, 'w') as f:
			f.write(fcgi_starter_template % d)

		for x in ['conf', 'fcgi']:
			chown("root:root", os.path.join(self.vhost_dir, x), '-R')

		chmod(555, starter_file)
		owner = "%s:%s" % (self.user, self.group)
		chown(owner, os.path.join(self.vhost_dir, 'fcgi'))
		chown(owner, starter_file)
		chattr('+i', starter_file)

	def _create_apache_config(self):
		files = [
			(self.config_file, config_template),
			(self.include_file,
				(include_template + php_snippet_template) if self.enable_php else include_template),
		]

		http_extras = ""
		if self.redirect_to_ssl:
			http_extras = "RedirectMatch /(.*) https://%(fqdn)s/$1" % { 'fqdn': self.fqdn }

		for filename, template in files:
			with open(filename, 'w') as f:
				f.write(template % {
					'domain': self.domain,
					'fqdn': self.fqdn,
					'vhost_dir': self.vhost_dir,
					'config_dir': self.config_dir,
					'include_file': self.include_file,
					'http_extras': http_extras,
					'https_extras': '', # not used atm
					'user': self.user,
					'group': self.group,
				})

def main(argv=None):
	try:
		parser = argparse.ArgumentParser(description='Creates a new apache virtual host suitable for the not-your-server.de environment')
		parser.add_argument('vhost', metavar='vhost', nargs=1, help='The virtual host FQDN')

		# available scripting languages
		lang_group = parser.add_argument_group('Scripting languages')
		lang_group.add_argument("--php", dest='enable_php', action='store_true',
								default=False, help="Enable PHP via FastCGI for this vhost (default: %(default)s)")
		lang_group.add_argument("--globals-dir", dest="globals_dir", help="Location of the master file")
		lang_group.add_argument("--master-ini", dest="master_phpini",
								default=None, help="Master (distribution) php.ini file (default: autodetect)")

		security_group = parser.add_argument_group('Security')
		security_group.add_argument('--no-suexec', dest='suexec', action='store_false',
								default=True, help="Disable SuExec (default: enabled)")
		security_group.add_argument('--default-user', dest='default_user',
								default='apache', help="The vhost owner if suexec is disabled")
		security_group.add_argument('--default-group', dest='default_group',
								default='apache', help="The vhost group if suexec is disabled")
		security_group.add_argument('--redirect-to-ssl', dest='redirect_to_ssl', action='store_true',
								default=False, help="Redirect HTTP request to HTTPS (default: %(default)s)")


		# other configuration options...
		other_group = parser.add_argument_group('Other options')
		other_group.add_argument('--basedir', dest='basedir', action='store',
								default='/var/www/', help='Alternate base dir for virtual hosts (default: %(default)s)')
		other_group.add_argument('--schema', dest='schema', action='store', default='%(fqdn)s',
								help='Vhost subdirectory naming schema (default: %(default)s)')
		other_group.add_argument('--config-dir', dest='config_dir', default='/etc/apache2/vhosts.d/',
								help="Alternate configuration directory (default: %(default)s")

		args = parser.parse_args()

		# configure and run
		configurator = VhostConfigurator(args.vhost[0])

		configurator.script_dir = os.path.dirname(__file__)

		for k, v in args.__dict__.iteritems():
			if not k == "vhost":
				setattr(configurator, k, v)

		configurator.create()

	except Exception, e:
		logging.error(e)
		logging.error(traceback.format_exc())
		return 2

if __name__ == "__main__":
	sys.exit(main())
